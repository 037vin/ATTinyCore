
optiboot_attiny441.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000fda  000002ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025a  00000d80  00000d80  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00000ffe  00000ffe  000002ee  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000011  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000301  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000664  00000000  00000000  00000331  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002c8  00000000  00000000  00000995  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ad  00000000  00000000  00000c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  0000100c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000214  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003ab  00000000  00000000  000012bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00001667  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000d80 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table,
  //   so entry to this function will always be here, independent of compilation,
  //   features etc
  asm volatile (
 d80:	01 c0       	rjmp	.+2      	; 0xd84 <main>
 d82:	22 c1       	rjmp	.+580    	; 0xfc8 <do_spm>

00000d84 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
 d84:	11 24       	eor	r1, r1
   *
   * Code by MarkG55
   * see discussion in https://github.com/Optiboot/optiboot/issues/97
   */

  ch = MCUSTATUSREG;
 d86:	84 b7       	in	r24, 0x34	; 52

  // Skip all logic and run bootloader if MCUSR is cleared (application request)
  if (ch != 0) {
 d88:	88 23       	and	r24, r24
 d8a:	79 f0       	breq	.+30     	; 0xdaa <main+0x26>
     * an external reset - only useful in combination with above,
     * for some unusual use cases.
     *
     */
#if (!(defined(START_APP_ON_EXTR)||defined(NO_START_APP_ON_POR))) //normal behavior
    if ((ch & (_BV(WDRF) | _BV(EXTRF))) != _BV(EXTRF)) {                      // Run app if EXTRF not set, or WDRF and EXTRF set
 d8c:	98 2f       	mov	r25, r24
 d8e:	9a 70       	andi	r25, 0x0A	; 10
 d90:	92 30       	cpi	r25, 0x02	; 2
 d92:	59 f0       	breq	.+22     	; 0xdaa <main+0x26>
      if (ch & _BV(EXTRF)) {                                                  // Both WDRF and EXTRF are set
 d94:	81 ff       	sbrs	r24, 1
 d96:	03 c0       	rjmp	.+6      	; 0xd9e <main+0x1a>
         * Clear WDRF because it was most probably set by wdr in bootloader.
         * It's also needed to avoid loop by broken application which could
         * prevent entering bootloader.
         * '&= allows CBI to be used, saves flash
         */
        MCUSTATUSREG &= ~(_BV(WDRF));
 d98:	94 b7       	in	r25, 0x34	; 52
 d9a:	97 7f       	andi	r25, 0xF7	; 247
 d9c:	94 bf       	out	0x34, r25	; 52
      /*
       * save the reset flags in the designated register
       * This can be saved in a main program by putting code in .init0 (which
       * executes before normal c init code) to save R2 to a global variable.
       */
      __asm__ __volatile__ ("mov r2, %0\n" :: "r" (ch));
 d9e:	28 2e       	mov	r2, r24

      // switch off watchdog
      watchdogConfig(WATCHDOG_OFF);
 da0:	80 e0       	ldi	r24, 0x00	; 0
 da2:	fe d0       	rcall	.+508    	; 0xfa0 <watchdogConfig>
      // Note that appstart_vec is defined so that this works with either
      // real or virtual boot partitions.
       __asm__ __volatile__ (
 da4:	ee e0       	ldi	r30, 0x0E	; 14
 da6:	ff 27       	eor	r31, r31
 da8:	09 94       	ijmp
#elif defined(__AVR_ATtiny25__)||defined(__AVR_ATtiny45__)||defined(__AVR_ATtiny85__)
  TCCR1 = 0x0E; //div 8196 - it's an 8-bit timer.
#elif defined(__AVR_ATtiny43__)
  #error "LED flash for Tiny43 not yet supported"
#else
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
 daa:	85 e0       	ldi	r24, 0x05	; 5
 dac:	8e bd       	out	0x2e, r24	; 46
  LINBTR = (1 << LDISR) | (8 << LBT0);
  LINCR = _BV(LENA) | _BV(LCMD2) | _BV(LCMD1) | _BV(LCMD0);
  LINDAT=0;
    #else
      #ifndef SINGLESPEED
  UART_SRA = _BV(U2X0); //Double speed mode USART0
 dae:	82 e0       	ldi	r24, 0x02	; 2
 db0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
      #endif
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
 db4:	88 e1       	ldi	r24, 0x18	; 24
 db6:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
 dba:	86 e0       	ldi	r24, 0x06	; 6
 dbc:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
  UART_SRL = (uint8_t)BAUD_SETTING;
 dc0:	80 e1       	ldi	r24, 0x10	; 16
 dc2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
  RS485_PORT &= ~_BV(RS485);
  #endif
#endif

  // Set up watchdog to trigger after 1s
  watchdogConfig(WDTPERIOD);
 dc6:	8e e0       	ldi	r24, 0x0E	; 14
 dc8:	eb d0       	rcall	.+470    	; 0xfa0 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH) || defined(LED_START_ON)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
 dca:	ba 9a       	sbi	0x17, 2	; 23
 dcc:	86 e0       	ldi	r24, 0x06	; 6
        TIFR = _BV(TOV1);
        while(!(TIFR & _BV(TOV1)));
    #elif defined(__AVR_ATtiny43__)
        #error "LED flash for Tiny43 not yet supported"
    #else
        TCNT1 = -(F_CPU/(1024*16));
 dce:	28 e1       	ldi	r18, 0x18	; 24
 dd0:	3e ef       	ldi	r19, 0xFE	; 254
        TIFR1 = _BV(TOV1);
 dd2:	91 e0       	ldi	r25, 0x01	; 1
        TIFR = _BV(TOV1);
        while(!(TIFR & _BV(TOV1)));
    #elif defined(__AVR_ATtiny43__)
        #error "LED flash for Tiny43 not yet supported"
    #else
        TCNT1 = -(F_CPU/(1024*16));
 dd4:	3d bd       	out	0x2d, r19	; 45
 dd6:	2c bd       	out	0x2c, r18	; 44
        TIFR1 = _BV(TOV1);
 dd8:	9e b9       	out	0x0e, r25	; 14
        while(!(TIFR1 & _BV(TOV1)));
 dda:	70 9b       	sbis	0x0e, 0	; 14
 ddc:	fe cf       	rjmp	.-4      	; 0xdda <main+0x56>
    defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)   ||    \
    defined(__AVR_ATmega162__)  || defined(__AVR_ATmega32__)   ||    \
    defined(__AVR_ATmega64__)   || defined(__AVR_ATmega128__)
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
 dde:	b2 9a       	sbi	0x16, 2	; 22
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
 de0:	a8 95       	wdr
     *  by the UART hardware, avrdude sends several attempts in rather
     *  quick succession, some of which will be lost and cause us to
     *  get out of sync.  So if we see any data; stop blinking.
     */
#ifndef LIN_UART
    if (UART_SRA & _BV(RXC0))
 de2:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
 de6:	47 fd       	sbrc	r20, 7
 de8:	02 c0       	rjmp	.+4      	; 0xdee <main+0x6a>
 dea:	81 50       	subi	r24, 0x01	; 1
#else
// This doesn't seem to work?
//    if ((UART_PIN & (1<<UART_RX_BIT)) == 0)
//    break;  // detect start bit on soft uart too.
#endif
  } while (--count);
 dec:	99 f7       	brne	.-26     	; 0xdd4 <main+0x50>

        /*
         * Copy data from the buffer into the flash write buffer.
         */
        do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
 dee:	aa 24       	eor	r10, r10
 df0:	a3 94       	inc	r10
        } while (len -= 2);

        /*
         * Actually Write the buffer to flash (and wait for it to finish.)
         */
        __boot_page_write_short(address.word);
 df2:	95 e0       	ldi	r25, 0x05	; 5
 df4:	99 2e       	mov	r9, r25
        // Move RESET vector to 'save' vector
    // Save jmp targets (for "Verify")
    rstVect0_sav = buff.bptr[rstVect0];
    rstVect1_sav = buff.bptr[rstVect1];
    addr16_t vect;
    vect.word = ((uint16_t)main);
 df6:	22 ec       	ldi	r18, 0xC2	; 194
 df8:	c2 2e       	mov	r12, r18
 dfa:	26 e0       	ldi	r18, 0x06	; 6
 dfc:	d2 2e       	mov	r13, r18
    buff.bptr[0] = vect.bytes[0]; // rjmp to start of bootloader
    buff.bptr[1] = vect.bytes[1] | 0xC0;  // make an "rjmp"
 dfe:	8d 2d       	mov	r24, r13
 e00:	80 6c       	ori	r24, 0xC0	; 192
 e02:	88 2e       	mov	r8, r24
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
 e04:	c1 d0       	rcall	.+386    	; 0xf88 <getch>

    if(ch == STK_GET_PARAMETER) {
 e06:	81 34       	cpi	r24, 0x41	; 65
 e08:	61 f4       	brne	.+24     	; 0xe22 <main+0x9e>
      unsigned char which = getch();
 e0a:	be d0       	rcall	.+380    	; 0xf88 <getch>
 e0c:	18 2f       	mov	r17, r24
      verifySpace();
 e0e:	cd d0       	rcall	.+410    	; 0xfaa <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
 e10:	12 38       	cpi	r17, 0x82	; 130
 e12:	e9 f0       	breq	.+58     	; 0xe4e <main+0xca>
      putch(optiboot_version & 0xFF);
      } else if (which == STK_SW_MAJOR) {
 e14:	11 38       	cpi	r17, 0x81	; 129
 e16:	11 f4       	brne	.+4      	; 0xe1c <main+0x98>
      putch(optiboot_version >> 8);
 e18:	8b e3       	ldi	r24, 0x3B	; 59
 e1a:	01 c0       	rjmp	.+2      	; 0xe1e <main+0x9a>
      } else {
    /*
     * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
     */
    putch(0x03);
 e1c:	83 e0       	ldi	r24, 0x03	; 3
 e1e:	ad d0       	rcall	.+346    	; 0xf7a <putch>
 e20:	a9 c0       	rjmp	.+338    	; 0xf74 <main+0x1f0>
      }
    }
    else if(ch == STK_SET_DEVICE) {
 e22:	82 34       	cpi	r24, 0x42	; 66
 e24:	11 f4       	brne	.+4      	; 0xe2a <main+0xa6>
      // SET DEVICE is ignored
      getNch(20);
 e26:	84 e1       	ldi	r24, 0x14	; 20
 e28:	03 c0       	rjmp	.+6      	; 0xe30 <main+0xac>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
 e2a:	85 34       	cpi	r24, 0x45	; 69
 e2c:	19 f4       	brne	.+6      	; 0xe34 <main+0xb0>
      // SET DEVICE EXT is ignored
      getNch(5);
 e2e:	85 e0       	ldi	r24, 0x05	; 5
 e30:	c4 d0       	rcall	.+392    	; 0xfba <getNch>
 e32:	a0 c0       	rjmp	.+320    	; 0xf74 <main+0x1f0>
    }
    else if(ch == STK_LOAD_ADDRESS) {
 e34:	85 35       	cpi	r24, 0x55	; 85
 e36:	39 f4       	brne	.+14     	; 0xe46 <main+0xc2>
      // LOAD ADDRESS
      address.bytes[0] = getch();
 e38:	a7 d0       	rcall	.+334    	; 0xf88 <getch>
 e3a:	c8 2f       	mov	r28, r24
      address.bytes[1] = getch();
 e3c:	a5 d0       	rcall	.+330    	; 0xf88 <getch>
 e3e:	d8 2f       	mov	r29, r24
      }
      else {
        RAMPZ &= 0xFE;
      }
#endif
      address.word *= 2; // Convert from word address to byte address
 e40:	cc 0f       	add	r28, r28
 e42:	dd 1f       	adc	r29, r29
 e44:	96 c0       	rjmp	.+300    	; 0xf72 <main+0x1ee>
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
 e46:	86 35       	cpi	r24, 0x56	; 86
 e48:	21 f4       	brne	.+8      	; 0xe52 <main+0xce>
        getNch(3);
        putch(0x00);
      }
#else
      // UNIVERSAL command is ignored
      getNch(4);
 e4a:	84 e0       	ldi	r24, 0x04	; 4
 e4c:	b6 d0       	rcall	.+364    	; 0xfba <getNch>
      putch(0x00);
 e4e:	80 e0       	ldi	r24, 0x00	; 0
 e50:	e6 cf       	rjmp	.-52     	; 0xe1e <main+0x9a>
#endif
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
 e52:	84 36       	cpi	r24, 0x64	; 100
 e54:	09 f0       	breq	.+2      	; 0xe58 <main+0xd4>
 e56:	57 c0       	rjmp	.+174    	; 0xf06 <main+0x182>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
 e58:	97 d0       	rcall	.+302    	; 0xf88 <getch>
 e5a:	96 d0       	rcall	.+300    	; 0xf88 <getch>
 e5c:	b8 2e       	mov	r11, r24
      savelength = length;
      desttype = getch();
 e5e:	94 d0       	rcall	.+296    	; 0xf88 <getch>
 e60:	78 2e       	mov	r7, r24
 e62:	00 e0       	ldi	r16, 0x00	; 0
 e64:	11 e0       	ldi	r17, 0x01	; 1

      // read a page worth of contents
      bufPtr = buff.bptr;
      do *bufPtr++ = getch();
 e66:	90 d0       	rcall	.+288    	; 0xf88 <getch>
 e68:	f8 01       	movw	r30, r16
 e6a:	81 93       	st	Z+, r24
 e6c:	8f 01       	movw	r16, r30
      while (--length);
 e6e:	be 12       	cpse	r11, r30
 e70:	fa cf       	rjmp	.-12     	; 0xe66 <main+0xe2>

      // Read command terminator, start reply
      verifySpace();
 e72:	9b d0       	rcall	.+310    	; 0xfaa <verifySpace>

#else
/*
 * AVR with 2-byte ISR Vectors and rjmp
 */
      if (address.word == rstVect0) {
 e74:	20 97       	sbiw	r28, 0x00	; 0
 e76:	69 f4       	brne	.+26     	; 0xe92 <main+0x10e>
        // This is the reset vector page. We need to live-patch
        // the code so the bootloader runs first.
        //
        // Move RESET vector to 'save' vector
    // Save jmp targets (for "Verify")
    rstVect0_sav = buff.bptr[rstVect0];
 e78:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 e7c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <_edata+0x24>
    rstVect1_sav = buff.bptr[rstVect1];
 e80:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_edata+0x1>
 e84:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <_edata+0x25>
    addr16_t vect;
    vect.word = ((uint16_t)main);
    buff.bptr[0] = vect.bytes[0]; // rjmp to start of bootloader
 e88:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <_edata>
    buff.bptr[1] = vect.bytes[1] | 0xC0;  // make an "rjmp"
 e8c:	80 92 01 01 	sts	0x0101, r8	; 0x800101 <_edata+0x1>
 e90:	19 c0       	rjmp	.+50     	; 0xec4 <main+0x140>
#if (save_vect_num > SPM_PAGESIZE/2)
} else if (address.word == (SPM_PAGESIZE*(save_vect_num/(SPM_PAGESIZE/2)))) { //allow for any vector
 e92:	c0 31       	cpi	r28, 0x10	; 16
 e94:	d1 05       	cpc	r29, r1
 e96:	b1 f4       	brne	.+44     	; 0xec4 <main+0x140>
    // Instruction is a relative jump (rjmp), so recalculate.
    // an RJMP instruction is 0b1100xxxx xxxxxxxx, so we should be able to
    // do math on the offsets without masking it off first.
    addr16_t vect;
    vect.bytes[0] = rstVect0_sav;
 e98:	e0 90 24 01 	lds	r14, 0x0124	; 0x800124 <_edata+0x24>
    vect.bytes[1] = rstVect1_sav;
 e9c:	f0 90 25 01 	lds	r15, 0x0125	; 0x800125 <_edata+0x25>
    saveVect0_sav = buff.bptr[saveVect0-(SPM_PAGESIZE*(save_vect_num/(SPM_PAGESIZE/2)))];
 ea0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_edata+0xc>
 ea4:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <_edata+0x26>
    saveVect1_sav = buff.bptr[saveVect1-(SPM_PAGESIZE*(save_vect_num/(SPM_PAGESIZE/2)))];
 ea8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_edata+0xd>
 eac:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <_edata+0x27>
    vect.word = (vect.word-save_vect_num); //subtract 'save' interrupt position
 eb0:	fe e0       	ldi	r31, 0x0E	; 14
 eb2:	ef 1a       	sub	r14, r31
 eb4:	f1 08       	sbc	r15, r1
        // Move RESET jmp target to 'save' vector
        buff.bptr[saveVect0-(SPM_PAGESIZE*(save_vect_num/(SPM_PAGESIZE/2)))] = vect.bytes[0];
 eb6:	e0 92 0c 01 	sts	0x010C, r14	; 0x80010c <_edata+0xc>
        buff.bptr[saveVect1-(SPM_PAGESIZE*(save_vect_num/(SPM_PAGESIZE/2)))] = (vect.bytes[1] & 0x0F)| 0xC0;  // make an "rjmp"
 eba:	8f 2d       	mov	r24, r15
 ebc:	8f 70       	andi	r24, 0x0F	; 15
 ebe:	80 6c       	ori	r24, 0xC0	; 192
 ec0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_edata+0xd>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, addr16_t mybuff,
                   addr16_t address, pagelen_t len)
{
    switch (memtype) {
 ec4:	85 e4       	ldi	r24, 0x45	; 69
 ec6:	78 12       	cpse	r7, r24
 ec8:	01 c0       	rjmp	.+2      	; 0xecc <main+0x148>
 eca:	ff cf       	rjmp	.-2      	; 0xeca <main+0x146>
         * used to be code to do this while receiving the data over
         * the serial link, but the performance improvement was slight,
         * and we needed the space back.
         */
#ifdef FOURPAGEERASE
        if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
 ecc:	8c 2f       	mov	r24, r28
 ece:	8f 73       	andi	r24, 0x3F	; 63
 ed0:	39 f4       	brne	.+14     	; 0xee0 <main+0x15c>
#endif
        __boot_page_erase_short(address.word);
 ed2:	83 e0       	ldi	r24, 0x03	; 3
 ed4:	fe 01       	movw	r30, r28
 ed6:	87 bf       	out	0x37, r24	; 55
 ed8:	e8 95       	spm
        boot_spm_busy_wait();
 eda:	07 b6       	in	r0, 0x37	; 55
 edc:	00 fc       	sbrc	r0, 0
 ede:	fd cf       	rjmp	.-6      	; 0xeda <main+0x156>
         * used to be code to do this while receiving the data over
         * the serial link, but the performance improvement was slight,
         * and we needed the space back.
         */
#ifdef FOURPAGEERASE
        if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
 ee0:	fe 01       	movw	r30, r28
 ee2:	a0 e0       	ldi	r26, 0x00	; 0
 ee4:	b1 e0       	ldi	r27, 0x01	; 1

        /*
         * Copy data from the buffer into the flash write buffer.
         */
        do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
 ee6:	8d 91       	ld	r24, X+
 ee8:	9d 91       	ld	r25, X+
 eea:	0c 01       	movw	r0, r24
 eec:	a7 be       	out	0x37, r10	; 55
 eee:	e8 95       	spm
 ef0:	11 24       	eor	r1, r1
        addrPtr += 2;
 ef2:	32 96       	adiw	r30, 0x02	; 2
        } while (len -= 2);
 ef4:	ba 12       	cpse	r11, r26
 ef6:	f7 cf       	rjmp	.-18     	; 0xee6 <main+0x162>

        /*
         * Actually Write the buffer to flash (and wait for it to finish.)
         */
        __boot_page_write_short(address.word);
 ef8:	fe 01       	movw	r30, r28
 efa:	97 be       	out	0x37, r9	; 55
 efc:	e8 95       	spm
        boot_spm_busy_wait();
 efe:	07 b6       	in	r0, 0x37	; 55
 f00:	00 fc       	sbrc	r0, 0
 f02:	fd cf       	rjmp	.-6      	; 0xefe <main+0x17a>
 f04:	37 c0       	rjmp	.+110    	; 0xf74 <main+0x1f0>
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
 f06:	84 37       	cpi	r24, 0x74	; 116
 f08:	39 f5       	brne	.+78     	; 0xf58 <main+0x1d4>
      uint8_t desttype;
      GETLENGTH(length);
 f0a:	3e d0       	rcall	.+124    	; 0xf88 <getch>
 f0c:	3d d0       	rcall	.+122    	; 0xf88 <getch>
 f0e:	b8 2e       	mov	r11, r24

      desttype = getch();
 f10:	3b d0       	rcall	.+118    	; 0xf88 <getch>

      verifySpace();
 f12:	4b d0       	rcall	.+150    	; 0xfaa <verifySpace>
 f14:	8e 01       	movw	r16, r28
#endif
    default:
    do {
#ifdef VIRTUAL_BOOT_PARTITION
        // Undo vector patch in bottom page so verify passes
        if (address.word == rstVect0) ch = rstVect0_sav;
 f16:	01 15       	cp	r16, r1
 f18:	11 05       	cpc	r17, r1
 f1a:	19 f4       	brne	.+6      	; 0xf22 <main+0x19e>
 f1c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <_edata+0x24>
 f20:	14 c0       	rjmp	.+40     	; 0xf4a <main+0x1c6>
        else if (address.word == rstVect1) ch = rstVect1_sav;
 f22:	01 30       	cpi	r16, 0x01	; 1
 f24:	11 05       	cpc	r17, r1
 f26:	19 f4       	brne	.+6      	; 0xf2e <main+0x1aa>
 f28:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <_edata+0x25>
 f2c:	0e c0       	rjmp	.+28     	; 0xf4a <main+0x1c6>
        else if (address.word == saveVect0) ch = saveVect0_sav;
 f2e:	0c 31       	cpi	r16, 0x1C	; 28
 f30:	11 05       	cpc	r17, r1
 f32:	19 f4       	brne	.+6      	; 0xf3a <main+0x1b6>
 f34:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <_edata+0x26>
 f38:	08 c0       	rjmp	.+16     	; 0xf4a <main+0x1c6>
        else if (address.word == saveVect1) ch = saveVect1_sav;
 f3a:	0d 31       	cpi	r16, 0x1D	; 29
 f3c:	11 05       	cpc	r17, r1
 f3e:	19 f4       	brne	.+6      	; 0xf46 <main+0x1c2>
 f40:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <_edata+0x27>
 f44:	02 c0       	rjmp	.+4      	; 0xf4a <main+0x1c6>
        else ch = pgm_read_byte_near(address.bptr);
 f46:	f8 01       	movw	r30, r16
 f48:	84 91       	lpm	r24, Z
        __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#else
        // read a Flash byte and increment the address
        __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#endif
        putch(ch);
 f4a:	17 d0       	rcall	.+46     	; 0xf7a <putch>
    } while (--length);
 f4c:	ba 94       	dec	r11
 f4e:	0f 5f       	subi	r16, 0xFF	; 255
 f50:	1f 4f       	sbci	r17, 0xFF	; 255
 f52:	b1 10       	cpse	r11, r1
 f54:	e0 cf       	rjmp	.-64     	; 0xf16 <main+0x192>
 f56:	0e c0       	rjmp	.+28     	; 0xf74 <main+0x1f0>

      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
 f58:	85 37       	cpi	r24, 0x75	; 117
 f5a:	39 f4       	brne	.+14     	; 0xf6a <main+0x1e6>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
 f5c:	26 d0       	rcall	.+76     	; 0xfaa <verifySpace>
      putch(SIGNATURE_0);
 f5e:	8e e1       	ldi	r24, 0x1E	; 30
 f60:	0c d0       	rcall	.+24     	; 0xf7a <putch>
      putch(SIGNATURE_1);
 f62:	82 e9       	ldi	r24, 0x92	; 146
 f64:	0a d0       	rcall	.+20     	; 0xf7a <putch>
      putch(SIGNATURE_2);
 f66:	85 e1       	ldi	r24, 0x15	; 21
 f68:	5a cf       	rjmp	.-332    	; 0xe1e <main+0x9a>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
 f6a:	81 35       	cpi	r24, 0x51	; 81
 f6c:	11 f4       	brne	.+4      	; 0xf72 <main+0x1ee>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
 f6e:	88 e0       	ldi	r24, 0x08	; 8
 f70:	17 d0       	rcall	.+46     	; 0xfa0 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
 f72:	1b d0       	rcall	.+54     	; 0xfaa <verifySpace>
    }
    putch(STK_OK);
 f74:	80 e1       	ldi	r24, 0x10	; 16
 f76:	01 d0       	rcall	.+2      	; 0xf7a <putch>
  }
 f78:	45 cf       	rjmp	.-374    	; 0xe04 <main+0x80>

00000f7a <putch>:
      RS485_PORT |= _BV(RS485);
      #else
      RS485_PORT &= ~_BV(RS485);
      #endif
    #else //not RS485
      while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
 f7a:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
 f7e:	95 ff       	sbrs	r25, 5
 f80:	fc cf       	rjmp	.-8      	; 0xf7a <putch>
        UART_UDR = ch;
 f82:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
 f86:	08 95       	ret

00000f88 <getch>:
    :
      "r25"
);
#else
#ifndef LIN_UART
  while(!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
 f88:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
 f8c:	87 ff       	sbrs	r24, 7
 f8e:	fc cf       	rjmp	.-8      	; 0xf88 <getch>
  if (!(UART_SRA & _BV(FE0))) {
 f90:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
 f94:	84 fd       	sbrc	r24, 4
 f96:	01 c0       	rjmp	.+2      	; 0xf9a <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
 f98:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
 f9a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
 f9e:	08 95       	ret

00000fa0 <watchdogConfig>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
 #else
  WDTCR= _BV(WDCE) | _BV(WDE);
 #endif
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
 fa0:	98 ed       	ldi	r25, 0xD8	; 216
 fa2:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__EEPROM_REGION_LENGTH__+0x7f0071>
#endif

#ifdef WDTCSR
  WDTCSR = x;
 fa6:	81 bd       	out	0x21, r24	; 33
 fa8:	08 95       	ret

00000faa <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
 faa:	ee df       	rcall	.-36     	; 0xf88 <getch>
 fac:	80 32       	cpi	r24, 0x20	; 32
 fae:	19 f0       	breq	.+6      	; 0xfb6 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
 fb0:	88 e0       	ldi	r24, 0x08	; 8
 fb2:	f6 df       	rcall	.-20     	; 0xfa0 <watchdogConfig>
 fb4:	ff cf       	rjmp	.-2      	; 0xfb4 <verifySpace+0xa>
    while (1)                  // and busy-loop so that WD causes
      ;                      //  a reset and app start.
  }
  putch(STK_INSYNC);
 fb6:	84 e1       	ldi	r24, 0x14	; 20
 fb8:	e0 cf       	rjmp	.-64     	; 0xf7a <putch>

00000fba <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
 fba:	cf 93       	push	r28
 fbc:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
 fbe:	e4 df       	rcall	.-56     	; 0xf88 <getch>
 fc0:	c1 50       	subi	r28, 0x01	; 1
 fc2:	e9 f7       	brne	.-6      	; 0xfbe <getNch+0x4>
  verifySpace();
}
 fc4:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
 fc6:	f1 cf       	rjmp	.-30     	; 0xfaa <verifySpace>

00000fc8 <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
    // Do spm stuff
    asm volatile (
 fc8:	fc 01       	movw	r30, r24
 fca:	0a 01       	movw	r0, r20
 fcc:	67 bf       	out	0x37, r22	; 55
 fce:	e8 95       	spm
 fd0:	11 24       	eor	r1, r1
    );

    // wait for spm to complete
    //   it doesn't have much sense for __BOOT_PAGE_FILL,
    //   but it doesn't hurt and saves some bytes on 'if'
    boot_spm_busy_wait();
 fd2:	07 b6       	in	r0, 0x37	; 55
 fd4:	00 fc       	sbrc	r0, 0
 fd6:	fd cf       	rjmp	.-6      	; 0xfd2 <do_spm+0xa>
    if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
      // Re-enable read access to flash
      __boot_rww_enable_short();
    }
#endif
}
 fd8:	08 95       	ret
