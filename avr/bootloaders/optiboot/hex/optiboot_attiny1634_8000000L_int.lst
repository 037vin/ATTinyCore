
optiboot_attiny1634.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00003fcc  000002e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024c  00003d80  00003d80  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00003ffe  00003ffe  000002e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000011  00000000  00000000  000002e2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000064e  00000000  00000000  00000323  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002c8  00000000  00000000  00000971  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b4  00000000  00000000  00000c39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  00000ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000020f  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c5  00000000  00000000  0000129b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00003d80 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table,
  //   so entry to this function will always be here, independent of compilation,
  //   features etc
  asm volatile (
    3d80:	01 c0       	rjmp	.+2      	; 0x3d84 <main>
    3d82:	1b c1       	rjmp	.+566    	; 0x3fba <do_spm>

00003d84 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    3d84:	11 24       	eor	r1, r1
   *
   * Code by MarkG55
   * see discussion in https://github.com/Optiboot/optiboot/issues/97
   */

  ch = MCUSTATUSREG;
    3d86:	85 b7       	in	r24, 0x35	; 53

  // Skip all logic and run bootloader if MCUSR is cleared (application request)
  if (ch != 0) {
    3d88:	88 23       	and	r24, r24
    3d8a:	79 f0       	breq	.+30     	; 0x3daa <main+0x26>
     * an external reset - only useful in combination with above,
     * for some unusual use cases.
     *
     */
#if (!(defined(START_APP_ON_EXTR)||defined(NO_START_APP_ON_POR))) //normal behavior
    if ((ch & (_BV(WDRF) | _BV(EXTRF))) != _BV(EXTRF)) {                      // Run app if EXTRF not set, or WDRF and EXTRF set
    3d8c:	98 2f       	mov	r25, r24
    3d8e:	9a 70       	andi	r25, 0x0A	; 10
    3d90:	92 30       	cpi	r25, 0x02	; 2
    3d92:	59 f0       	breq	.+22     	; 0x3daa <main+0x26>
      if (ch & _BV(EXTRF)) {                                                  // Both WDRF and EXTRF are set
    3d94:	81 ff       	sbrs	r24, 1
    3d96:	03 c0       	rjmp	.+6      	; 0x3d9e <main+0x1a>
         * Clear WDRF because it was most probably set by wdr in bootloader.
         * It's also needed to avoid loop by broken application which could
         * prevent entering bootloader.
         * '&= allows CBI to be used, saves flash
         */
        MCUSTATUSREG &= ~(_BV(WDRF));
    3d98:	95 b7       	in	r25, 0x35	; 53
    3d9a:	97 7f       	andi	r25, 0xF7	; 247
    3d9c:	95 bf       	out	0x35, r25	; 53
      /*
       * save the reset flags in the designated register
       * This can be saved in a main program by putting code in .init0 (which
       * executes before normal c init code) to save R2 to a global variable.
       */
      __asm__ __volatile__ ("mov r2, %0\n" :: "r" (ch));
    3d9e:	28 2e       	mov	r2, r24

      // switch off watchdog
      watchdogConfig(WATCHDOG_OFF);
    3da0:	80 e0       	ldi	r24, 0x00	; 0
    3da2:	f8 d0       	rcall	.+496    	; 0x3f94 <watchdogConfig>
      // Note that appstart_vec is defined so that this works with either
      // real or virtual boot partitions.
       __asm__ __volatile__ (
    3da4:	e4 e3       	ldi	r30, 0x34	; 52
    3da6:	ff 27       	eor	r31, r31
    3da8:	09 94       	ijmp
      );
    }
  } //end handling of MCUSR !=0
#ifdef LOWERCAL
  // If we need to bump down OSCCAL0 (for 841, 441, 828, 1634):
  OSCCAL0 = boot_signature_byte_get_short(1)-LOWERCAL;
    3daa:	e1 e0       	ldi	r30, 0x01	; 1
    3dac:	f0 e0       	ldi	r31, 0x00	; 0
    3dae:	81 e2       	ldi	r24, 0x21	; 33
    3db0:	87 bf       	out	0x37, r24	; 55
    3db2:	84 91       	lpm	r24, Z
    3db4:	89 50       	subi	r24, 0x09	; 9
    3db6:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <__EEPROM_REGION_LENGTH__+0x7f0063>
#elif defined(__AVR_ATtiny25__)||defined(__AVR_ATtiny45__)||defined(__AVR_ATtiny85__)
  TCCR1 = 0x0E; //div 8196 - it's an 8-bit timer.
#elif defined(__AVR_ATtiny43__)
  #error "LED flash for Tiny43 not yet supported"
#else
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    3dba:	85 e0       	ldi	r24, 0x05	; 5
    3dbc:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__EEPROM_REGION_LENGTH__+0x7f0071>
  LINBTR = (1 << LDISR) | (8 << LBT0);
  LINCR = _BV(LENA) | _BV(LCMD2) | _BV(LCMD1) | _BV(LCMD0);
  LINDAT=0;
    #else
      #ifndef SINGLESPEED
  UART_SRA = _BV(U2X0); //Double speed mode USART0
    3dc0:	82 e0       	ldi	r24, 0x02	; 2
    3dc2:	86 bd       	out	0x26, r24	; 38
      #endif
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
    3dc4:	88 e1       	ldi	r24, 0x18	; 24
    3dc6:	85 bd       	out	0x25, r24	; 37
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
    3dc8:	86 e0       	ldi	r24, 0x06	; 6
    3dca:	84 bd       	out	0x24, r24	; 36
  UART_SRL = (uint8_t)BAUD_SETTING;
    3dcc:	80 e1       	ldi	r24, 0x10	; 16
    3dce:	81 bd       	out	0x21, r24	; 33
  RS485_PORT &= ~_BV(RS485);
  #endif
#endif

  // Set up watchdog to trigger after 1s
  watchdogConfig(WDTPERIOD);
    3dd0:	8e e0       	ldi	r24, 0x0E	; 14
    3dd2:	e0 d0       	rcall	.+448    	; 0x3f94 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH) || defined(LED_START_ON)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    3dd4:	40 9a       	sbi	0x08, 0	; 8
    3dd6:	86 e0       	ldi	r24, 0x06	; 6
        TIFR = _BV(TOV1);
        while(!(TIFR & _BV(TOV1)));
    #elif defined(__AVR_ATtiny43__)
        #error "LED flash for Tiny43 not yet supported"
    #else
        TCNT1 = -(F_CPU/(1024*16));
    3dd8:	28 e1       	ldi	r18, 0x18	; 24
    3dda:	3e ef       	ldi	r19, 0xFE	; 254
        TIFR1 = _BV(TOV1);
    3ddc:	90 e8       	ldi	r25, 0x80	; 128
        TIFR = _BV(TOV1);
        while(!(TIFR & _BV(TOV1)));
    #elif defined(__AVR_ATtiny43__)
        #error "LED flash for Tiny43 not yet supported"
    #else
        TCNT1 = -(F_CPU/(1024*16));
    3dde:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
    3de2:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
        TIFR1 = _BV(TOV1);
    3de6:	99 bf       	out	0x39, r25	; 57
        while(!(TIFR1 & _BV(TOV1)));
    3de8:	09 b6       	in	r0, 0x39	; 57
    3dea:	07 fe       	sbrs	r0, 7
    3dec:	fd cf       	rjmp	.-6      	; 0x3de8 <main+0x64>
    defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)   ||    \
    defined(__AVR_ATmega162__)  || defined(__AVR_ATmega32__)   ||    \
    defined(__AVR_ATmega64__)   || defined(__AVR_ATmega128__)
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    3dee:	38 9a       	sbi	0x07, 0	; 7
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3df0:	a8 95       	wdr
     *  by the UART hardware, avrdude sends several attempts in rather
     *  quick succession, some of which will be lost and cause us to
     *  get out of sync.  So if we see any data; stop blinking.
     */
#ifndef LIN_UART
    if (UART_SRA & _BV(RXC0))
    3df2:	06 b4       	in	r0, 0x26	; 38
    3df4:	07 fc       	sbrc	r0, 7
    3df6:	02 c0       	rjmp	.+4      	; 0x3dfc <main+0x78>
    3df8:	81 50       	subi	r24, 0x01	; 1
#else
// This doesn't seem to work?
//    if ((UART_PIN & (1<<UART_RX_BIT)) == 0)
//    break;  // detect start bit on soft uart too.
#endif
  } while (--count);
    3dfa:	89 f7       	brne	.-30     	; 0x3dde <main+0x5a>


        // Add jump to bootloader at RESET vector
        // WARNING: this works as long as 'main' is in first section
        buff.bptr[rstVect0] = ((uint16_t)main) & 0xFF;
        buff.bptr[rstVect1] = ((uint16_t)main) >> 8;
    3dfc:	82 ec       	ldi	r24, 0xC2	; 194
    3dfe:	9e e1       	ldi	r25, 0x1E	; 30
    3e00:	c9 2e       	mov	r12, r25

        /*
         * Copy data from the buffer into the flash write buffer.
         */
        do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    3e02:	bb 24       	eor	r11, r11
    3e04:	b3 94       	inc	r11
        } while (len -= 2);

        /*
         * Actually Write the buffer to flash (and wait for it to finish.)
         */
        __boot_page_write_short(address.word);
    3e06:	25 e0       	ldi	r18, 0x05	; 5
    3e08:	a2 2e       	mov	r10, r18
         * and we needed the space back.
         */
#ifdef FOURPAGEERASE
        if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
#endif
        __boot_page_erase_short(address.word);
    3e0a:	33 e0       	ldi	r19, 0x03	; 3
    rstVect1_sav = buff.bptr[rstVect1];


        // Add jump to bootloader at RESET vector
        // WARNING: this works as long as 'main' is in first section
        buff.bptr[rstVect0] = ((uint16_t)main) & 0xFF;
    3e0c:	93 2e       	mov	r9, r19
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    3e0e:	7c 01       	movw	r14, r24

    if(ch == STK_GET_PARAMETER) {
    3e10:	b8 d0       	rcall	.+368    	; 0x3f82 <getch>
      unsigned char which = getch();
    3e12:	81 34       	cpi	r24, 0x41	; 65
    3e14:	61 f4       	brne	.+24     	; 0x3e2e <main+0xaa>
    3e16:	b5 d0       	rcall	.+362    	; 0x3f82 <getch>
      verifySpace();
    3e18:	18 2f       	mov	r17, r24
    3e1a:	c0 d0       	rcall	.+384    	; 0x3f9c <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
    3e1c:	12 38       	cpi	r17, 0x82	; 130
    3e1e:	e9 f0       	breq	.+58     	; 0x3e5a <main+0xd6>
      putch(optiboot_version & 0xFF);
      } else if (which == STK_SW_MAJOR) {
    3e20:	11 38       	cpi	r17, 0x81	; 129
      putch(optiboot_version >> 8);
    3e22:	11 f4       	brne	.+4      	; 0x3e28 <main+0xa4>
    3e24:	8b e3       	ldi	r24, 0x3B	; 59
      } else {
    /*
     * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
     */
    putch(0x03);
    3e26:	01 c0       	rjmp	.+2      	; 0x3e2a <main+0xa6>
    3e28:	83 e0       	ldi	r24, 0x03	; 3
    3e2a:	a6 d0       	rcall	.+332    	; 0x3f78 <putch>
    3e2c:	a2 c0       	rjmp	.+324    	; 0x3f72 <main+0x1ee>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    3e2e:	82 34       	cpi	r24, 0x42	; 66
      // SET DEVICE is ignored
      getNch(20);
    3e30:	11 f4       	brne	.+4      	; 0x3e36 <main+0xb2>
    3e32:	84 e1       	ldi	r24, 0x14	; 20
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    3e34:	03 c0       	rjmp	.+6      	; 0x3e3c <main+0xb8>
      // SET DEVICE EXT is ignored
      getNch(5);
    3e36:	85 34       	cpi	r24, 0x45	; 69
    3e38:	19 f4       	brne	.+6      	; 0x3e40 <main+0xbc>
    3e3a:	85 e0       	ldi	r24, 0x05	; 5
    }
    else if(ch == STK_LOAD_ADDRESS) {
    3e3c:	b7 d0       	rcall	.+366    	; 0x3fac <getNch>
    3e3e:	99 c0       	rjmp	.+306    	; 0x3f72 <main+0x1ee>
      // LOAD ADDRESS
      address.bytes[0] = getch();
    3e40:	85 35       	cpi	r24, 0x55	; 85
    3e42:	39 f4       	brne	.+14     	; 0x3e52 <main+0xce>
    3e44:	9e d0       	rcall	.+316    	; 0x3f82 <getch>
      address.bytes[1] = getch();
    3e46:	c8 2f       	mov	r28, r24
    3e48:	9c d0       	rcall	.+312    	; 0x3f82 <getch>
      }
      else {
        RAMPZ &= 0xFE;
      }
#endif
      address.word *= 2; // Convert from word address to byte address
    3e4a:	d8 2f       	mov	r29, r24
    3e4c:	cc 0f       	add	r28, r28
    3e4e:	dd 1f       	adc	r29, r29
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    3e50:	8f c0       	rjmp	.+286    	; 0x3f70 <main+0x1ec>
        getNch(3);
        putch(0x00);
      }
#else
      // UNIVERSAL command is ignored
      getNch(4);
    3e52:	86 35       	cpi	r24, 0x56	; 86
    3e54:	21 f4       	brne	.+8      	; 0x3e5e <main+0xda>
      putch(0x00);
    3e56:	84 e0       	ldi	r24, 0x04	; 4
    3e58:	a9 d0       	rcall	.+338    	; 0x3fac <getNch>
#endif
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    3e5a:	80 e0       	ldi	r24, 0x00	; 0
    3e5c:	e6 cf       	rjmp	.-52     	; 0x3e2a <main+0xa6>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    3e5e:	84 36       	cpi	r24, 0x64	; 100
    3e60:	09 f0       	breq	.+2      	; 0x3e64 <main+0xe0>
    3e62:	50 c0       	rjmp	.+160    	; 0x3f04 <main+0x180>
    3e64:	8e d0       	rcall	.+284    	; 0x3f82 <getch>
      savelength = length;
      desttype = getch();
    3e66:	8d d0       	rcall	.+282    	; 0x3f82 <getch>
    3e68:	d8 2e       	mov	r13, r24
    3e6a:	8b d0       	rcall	.+278    	; 0x3f82 <getch>
    3e6c:	88 2e       	mov	r8, r24
    3e6e:	00 e0       	ldi	r16, 0x00	; 0

      // read a page worth of contents
      bufPtr = buff.bptr;
      do *bufPtr++ = getch();
    3e70:	11 e0       	ldi	r17, 0x01	; 1
    3e72:	87 d0       	rcall	.+270    	; 0x3f82 <getch>
    3e74:	f8 01       	movw	r30, r16
    3e76:	81 93       	st	Z+, r24
    3e78:	8f 01       	movw	r16, r30
      while (--length);
    3e7a:	de 12       	cpse	r13, r30
    3e7c:	fa cf       	rjmp	.-12     	; 0x3e72 <main+0xee>

      // Read command terminator, start reply
      verifySpace();
    3e7e:	8e d0       	rcall	.+284    	; 0x3f9c <verifySpace>
    3e80:	20 97       	sbiw	r28, 0x00	; 0
 * WARNING: this works only up to 128KB flash!
 */
#if FLASHEND > (128*1024)
#error "Can't use VIRTUAL_BOOT_PARTITION with more than 128k of Flash"
#endif
      if (address.word == 0) {
    3e82:	69 f4       	brne	.+26     	; 0x3e9e <main+0x11a>
    3e84:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
    // This is the reset vector page. We need to live-patch the
    // code so the bootloader runs first.
    //
    // Save jmp targets (for "Verify")
    rstVect0_sav = buff.bptr[rstVect0];
    3e88:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <_edata+0x44>
    3e8c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_edata+0x3>
    rstVect1_sav = buff.bptr[rstVect1];
    3e90:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <_edata+0x45>
    3e94:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <_edata+0x2>


        // Add jump to bootloader at RESET vector
        // WARNING: this works as long as 'main' is in first section
        buff.bptr[rstVect0] = ((uint16_t)main) & 0xFF;
    3e98:	c0 92 03 01 	sts	0x0103, r12	; 0x800103 <_edata+0x3>
        buff.bptr[rstVect1] = ((uint16_t)main) >> 8;
    3e9c:	13 c0       	rjmp	.+38     	; 0x3ec4 <main+0x140>
    3e9e:	c0 36       	cpi	r28, 0x60	; 96
#if (save_vect_num>SPM_PAGESIZE/4)
    } else if (address.word == (SPM_PAGESIZE*(save_vect_num/(SPM_PAGESIZE/4)))) { //allow for any vector
    3ea0:	d1 05       	cpc	r29, r1
    3ea2:	81 f4       	brne	.+32     	; 0x3ec4 <main+0x140>
    3ea4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_edata+0xa>
        saveVect0_sav = buff.bptr[saveVect0-(SPM_PAGESIZE*(save_vect_num/(SPM_PAGESIZE/4)))];
    3ea8:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <_edata+0x46>
    3eac:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_edata+0xb>
        saveVect1_sav = buff.bptr[saveVect1-(SPM_PAGESIZE*(save_vect_num/(SPM_PAGESIZE/4)))];
    3eb0:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <_edata+0x47>
    3eb4:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_edata+0x44>

        // Move RESET jmp target to 'save' vector
        buff.bptr[saveVect0-(SPM_PAGESIZE*(save_vect_num/(SPM_PAGESIZE/4)))] = rstVect0_sav;
    3eb8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_edata+0xa>
    3ebc:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <_edata+0x45>
        buff.bptr[saveVect1-(SPM_PAGESIZE*(save_vect_num/(SPM_PAGESIZE/4)))] = rstVect1_sav;
    3ec0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_edata+0xb>
    3ec4:	f5 e4       	ldi	r31, 0x45	; 69
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, addr16_t mybuff,
                   addr16_t address, pagelen_t len)
{
    switch (memtype) {
    3ec6:	8f 12       	cpse	r8, r31
    3ec8:	01 c0       	rjmp	.+2      	; 0x3ecc <main+0x148>
    3eca:	ff cf       	rjmp	.-2      	; 0x3eca <main+0x146>
    3ecc:	8c 2f       	mov	r24, r28
         * used to be code to do this while receiving the data over
         * the serial link, but the performance improvement was slight,
         * and we needed the space back.
         */
#ifdef FOURPAGEERASE
        if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
    3ece:	8f 77       	andi	r24, 0x7F	; 127
    3ed0:	fe 01       	movw	r30, r28
#endif
        __boot_page_erase_short(address.word);
    3ed2:	31 f4       	brne	.+12     	; 0x3ee0 <main+0x15c>
         * used to be code to do this while receiving the data over
         * the serial link, but the performance improvement was slight,
         * and we needed the space back.
         */
#ifdef FOURPAGEERASE
        if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
    3ed4:	97 be       	out	0x37, r9	; 55
#endif
        __boot_page_erase_short(address.word);
    3ed6:	e8 95       	spm
    3ed8:	07 b6       	in	r0, 0x37	; 55
        boot_spm_busy_wait();
    3eda:	00 fc       	sbrc	r0, 0
    3edc:	fd cf       	rjmp	.-6      	; 0x3ed8 <main+0x154>
    3ede:	fe 01       	movw	r30, r28
    3ee0:	a0 e0       	ldi	r26, 0x00	; 0
         * used to be code to do this while receiving the data over
         * the serial link, but the performance improvement was slight,
         * and we needed the space back.
         */
#ifdef FOURPAGEERASE
        if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
    3ee2:	b1 e0       	ldi	r27, 0x01	; 1
    3ee4:	8d 91       	ld	r24, X+

        /*
         * Copy data from the buffer into the flash write buffer.
         */
        do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    3ee6:	9d 91       	ld	r25, X+
    3ee8:	0c 01       	movw	r0, r24
    3eea:	b7 be       	out	0x37, r11	; 55
    3eec:	e8 95       	spm
        addrPtr += 2;
        } while (len -= 2);
    3eee:	11 24       	eor	r1, r1

        /*
         * Actually Write the buffer to flash (and wait for it to finish.)
         */
        __boot_page_write_short(address.word);
    3ef0:	32 96       	adiw	r30, 0x02	; 2
    3ef2:	da 12       	cpse	r13, r26
    3ef4:	f7 cf       	rjmp	.-18     	; 0x3ee4 <main+0x160>
        boot_spm_busy_wait();
    3ef6:	fe 01       	movw	r30, r28
    3ef8:	a7 be       	out	0x37, r10	; 55
    3efa:	e8 95       	spm
    3efc:	07 b6       	in	r0, 0x37	; 55
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    3efe:	00 fc       	sbrc	r0, 0
    3f00:	fd cf       	rjmp	.-6      	; 0x3efc <main+0x178>
      uint8_t desttype;
      GETLENGTH(length);
    3f02:	37 c0       	rjmp	.+110    	; 0x3f72 <main+0x1ee>
    3f04:	84 37       	cpi	r24, 0x74	; 116
    3f06:	39 f5       	brne	.+78     	; 0x3f56 <main+0x1d2>
    3f08:	3c d0       	rcall	.+120    	; 0x3f82 <getch>
    3f0a:	3b d0       	rcall	.+118    	; 0x3f82 <getch>

      desttype = getch();
    3f0c:	d8 2e       	mov	r13, r24
    3f0e:	39 d0       	rcall	.+114    	; 0x3f82 <getch>

      verifySpace();
    3f10:	45 d0       	rcall	.+138    	; 0x3f9c <verifySpace>
    3f12:	8e 01       	movw	r16, r28
    3f14:	02 30       	cpi	r16, 0x02	; 2
#endif
    default:
    do {
#ifdef VIRTUAL_BOOT_PARTITION
        // Undo vector patch in bottom page so verify passes
        if (address.word == rstVect0) ch = rstVect0_sav;
    3f16:	11 05       	cpc	r17, r1
    3f18:	19 f4       	brne	.+6      	; 0x3f20 <main+0x19c>
    3f1a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_edata+0x44>
    3f1e:	14 c0       	rjmp	.+40     	; 0x3f48 <main+0x1c4>
    3f20:	03 30       	cpi	r16, 0x03	; 3
        else if (address.word == rstVect1) ch = rstVect1_sav;
    3f22:	11 05       	cpc	r17, r1
    3f24:	19 f4       	brne	.+6      	; 0x3f2c <main+0x1a8>
    3f26:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <_edata+0x45>
    3f2a:	0e c0       	rjmp	.+28     	; 0x3f48 <main+0x1c4>
        else if (address.word == saveVect0) ch = saveVect0_sav;
    3f2c:	0a 36       	cpi	r16, 0x6A	; 106
    3f2e:	11 05       	cpc	r17, r1
    3f30:	19 f4       	brne	.+6      	; 0x3f38 <main+0x1b4>
    3f32:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <_edata+0x46>
        else if (address.word == saveVect1) ch = saveVect1_sav;
    3f36:	08 c0       	rjmp	.+16     	; 0x3f48 <main+0x1c4>
    3f38:	0b 36       	cpi	r16, 0x6B	; 107
    3f3a:	11 05       	cpc	r17, r1
    3f3c:	19 f4       	brne	.+6      	; 0x3f44 <main+0x1c0>
        else ch = pgm_read_byte_near(address.bptr);
    3f3e:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <_edata+0x47>
        __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#else
        // read a Flash byte and increment the address
        __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#endif
        putch(ch);
    3f42:	02 c0       	rjmp	.+4      	; 0x3f48 <main+0x1c4>
    } while (--length);
    3f44:	f8 01       	movw	r30, r16
    3f46:	84 91       	lpm	r24, Z
    3f48:	17 d0       	rcall	.+46     	; 0x3f78 <putch>
    3f4a:	da 94       	dec	r13
    3f4c:	0f 5f       	subi	r16, 0xFF	; 255

      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    3f4e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f50:	d1 10       	cpse	r13, r1
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    3f52:	e0 cf       	rjmp	.-64     	; 0x3f14 <main+0x190>
    3f54:	0e c0       	rjmp	.+28     	; 0x3f72 <main+0x1ee>
      putch(SIGNATURE_0);
    3f56:	85 37       	cpi	r24, 0x75	; 117
    3f58:	39 f4       	brne	.+14     	; 0x3f68 <main+0x1e4>
    3f5a:	20 d0       	rcall	.+64     	; 0x3f9c <verifySpace>
      putch(SIGNATURE_1);
    3f5c:	8e e1       	ldi	r24, 0x1E	; 30
    3f5e:	0c d0       	rcall	.+24     	; 0x3f78 <putch>
    3f60:	84 e9       	ldi	r24, 0x94	; 148
      putch(SIGNATURE_2);
    3f62:	0a d0       	rcall	.+20     	; 0x3f78 <putch>
    3f64:	82 e1       	ldi	r24, 0x12	; 18
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    3f66:	61 cf       	rjmp	.-318    	; 0x3e2a <main+0xa6>
    3f68:	81 35       	cpi	r24, 0x51	; 81
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    3f6a:	11 f4       	brne	.+4      	; 0x3f70 <main+0x1ec>
    3f6c:	88 e0       	ldi	r24, 0x08	; 8
    3f6e:	12 d0       	rcall	.+36     	; 0x3f94 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    3f70:	15 d0       	rcall	.+42     	; 0x3f9c <verifySpace>
    3f72:	80 e1       	ldi	r24, 0x10	; 16
    }
    putch(STK_OK);
    3f74:	01 d0       	rcall	.+2      	; 0x3f78 <putch>
    3f76:	4c cf       	rjmp	.-360    	; 0x3e10 <main+0x8c>

00003f78 <putch>:
    3f78:	06 b4       	in	r0, 0x26	; 38
  }
    3f7a:	05 fe       	sbrs	r0, 5
      RS485_PORT |= _BV(RS485);
      #else
      RS485_PORT &= ~_BV(RS485);
      #endif
    #else //not RS485
      while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
    3f7c:	fd cf       	rjmp	.-6      	; 0x3f78 <putch>
        UART_UDR = ch;
    3f7e:	80 bd       	out	0x20, r24	; 32
    3f80:	08 95       	ret

00003f82 <getch>:
    :
      "r25"
);
#else
#ifndef LIN_UART
  while(!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
    3f82:	06 b4       	in	r0, 0x26	; 38
    3f84:	07 fe       	sbrs	r0, 7
    3f86:	fd cf       	rjmp	.-6      	; 0x3f82 <getch>
  if (!(UART_SRA & _BV(FE0))) {
    3f88:	06 b4       	in	r0, 0x26	; 38
    3f8a:	04 fc       	sbrc	r0, 4
    3f8c:	01 c0       	rjmp	.+2      	; 0x3f90 <getch+0xe>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3f8e:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    3f90:	80 b5       	in	r24, 0x20	; 32
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    3f92:	08 95       	ret

00003f94 <watchdogConfig>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
 #else
  WDTCR= _BV(WDCE) | _BV(WDE);
 #endif
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
    3f94:	98 ed       	ldi	r25, 0xD8	; 216
    3f96:	9f bd       	out	0x2f, r25	; 47
#endif

#ifdef WDTCSR
  WDTCSR = x;
    3f98:	80 bf       	out	0x30, r24	; 48
    3f9a:	08 95       	ret

00003f9c <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    3f9c:	f2 df       	rcall	.-28     	; 0x3f82 <getch>
    3f9e:	80 32       	cpi	r24, 0x20	; 32
    3fa0:	19 f0       	breq	.+6      	; 0x3fa8 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    3fa2:	88 e0       	ldi	r24, 0x08	; 8
    3fa4:	f7 df       	rcall	.-18     	; 0x3f94 <watchdogConfig>
    3fa6:	ff cf       	rjmp	.-2      	; 0x3fa6 <verifySpace+0xa>
    while (1)                  // and busy-loop so that WD causes
      ;                      //  a reset and app start.
  }
  putch(STK_INSYNC);
    3fa8:	84 e1       	ldi	r24, 0x14	; 20
    3faa:	e6 cf       	rjmp	.-52     	; 0x3f78 <putch>

00003fac <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    3fac:	cf 93       	push	r28
    3fae:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    3fb0:	e8 df       	rcall	.-48     	; 0x3f82 <getch>
    3fb2:	c1 50       	subi	r28, 0x01	; 1
    3fb4:	e9 f7       	brne	.-6      	; 0x3fb0 <getNch+0x4>
  verifySpace();
}
    3fb6:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    3fb8:	f1 cf       	rjmp	.-30     	; 0x3f9c <verifySpace>

00003fba <do_spm>:
    3fba:	fc 01       	movw	r30, r24
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
    // Do spm stuff
    asm volatile (
    3fbc:	0a 01       	movw	r0, r20
    3fbe:	67 bf       	out	0x37, r22	; 55
    3fc0:	e8 95       	spm
    3fc2:	11 24       	eor	r1, r1
    3fc4:	07 b6       	in	r0, 0x37	; 55
    );

    // wait for spm to complete
    //   it doesn't have much sense for __BOOT_PAGE_FILL,
    //   but it doesn't hurt and saves some bytes on 'if'
    boot_spm_busy_wait();
    3fc6:	00 fc       	sbrc	r0, 0
    3fc8:	fd cf       	rjmp	.-6      	; 0x3fc4 <do_spm+0xa>
    3fca:	08 95       	ret
