
optiboot_attiny88.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00001fd0  000002e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000250  00001d80  00001d80  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00001ffe  00001ffe  000002e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000011  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000664  00000000  00000000  00000327  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002de  00000000  00000000  0000098b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037b  00000000  00000000  00000c69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00000fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000021e  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003d8  00000000  00000000  000012ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00001686  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00001d80 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table,
  //   so entry to this function will always be here, independent of compilation,
  //   features etc
  asm volatile (
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <main>
    1d82:	1d c1       	rjmp	.+570    	; 0x1fbe <do_spm>

00001d84 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    1d84:	11 24       	eor	r1, r1
   *
   * Code by MarkG55
   * see discussion in https://github.com/Optiboot/optiboot/issues/97
   */

  ch = MCUSTATUSREG;
    1d86:	84 b7       	in	r24, 0x34	; 52

  // Skip all logic and run bootloader if MCUSR is cleared (application request)
  if (ch != 0) {
    1d88:	88 23       	and	r24, r24
    1d8a:	79 f0       	breq	.+30     	; 0x1daa <main+0x26>
     * an external reset - only useful in combination with above,
     * for some unusual use cases.
     *
     */
#if (!(defined(START_APP_ON_EXTR)||defined(NO_START_APP_ON_POR))) //normal behavior
    if ((ch & (_BV(WDRF) | _BV(EXTRF))) != _BV(EXTRF)) {                      // Run app if EXTRF not set, or WDRF and EXTRF set
    1d8c:	98 2f       	mov	r25, r24
    1d8e:	9a 70       	andi	r25, 0x0A	; 10
    1d90:	92 30       	cpi	r25, 0x02	; 2
    1d92:	59 f0       	breq	.+22     	; 0x1daa <main+0x26>
      if (ch & _BV(EXTRF)) {                                                  // Both WDRF and EXTRF are set
    1d94:	81 ff       	sbrs	r24, 1
    1d96:	03 c0       	rjmp	.+6      	; 0x1d9e <main+0x1a>
         * Clear WDRF because it was most probably set by wdr in bootloader.
         * It's also needed to avoid loop by broken application which could
         * prevent entering bootloader.
         * '&= allows CBI to be used, saves flash
         */
        MCUSTATUSREG &= ~(_BV(WDRF));
    1d98:	94 b7       	in	r25, 0x34	; 52
    1d9a:	97 7f       	andi	r25, 0xF7	; 247
    1d9c:	94 bf       	out	0x34, r25	; 52
      /*
       * save the reset flags in the designated register
       * This can be saved in a main program by putting code in .init0 (which
       * executes before normal c init code) to save R2 to a global variable.
       */
      __asm__ __volatile__ ("mov r2, %0\n" :: "r" (ch));
    1d9e:	28 2e       	mov	r2, r24

      // switch off watchdog
      watchdogConfig(WATCHDOG_OFF);
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	f8 d0       	rcall	.+496    	; 0x1f94 <watchdogConfig>
      // Note that appstart_vec is defined so that this works with either
      // real or virtual boot partitions.
       __asm__ __volatile__ (
    1da4:	e1 e1       	ldi	r30, 0x11	; 17
    1da6:	ff 27       	eor	r31, r31
    1da8:	09 94       	ijmp
#elif defined(__AVR_ATtiny25__)||defined(__AVR_ATtiny45__)||defined(__AVR_ATtiny85__)
  TCCR1 = 0x0E; //div 8196 - it's an 8-bit timer.
#elif defined(__AVR_ATtiny43__)
  #error "LED flash for Tiny43 not yet supported"
#else
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    1daa:	85 e0       	ldi	r24, 0x05	; 5
    1dac:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
  RS485_PORT &= ~_BV(RS485);
  #endif
#endif

  // Set up watchdog to trigger after 1s
  watchdogConfig(WDTPERIOD);
    1db0:	8e e0       	ldi	r24, 0x0E	; 14
    1db2:	f0 d0       	rcall	.+480    	; 0x1f94 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH) || defined(LED_START_ON)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    1db4:	25 9a       	sbi	0x04, 5	; 4
#endif

#ifdef SOFT_UART
  /* Set TX pin as output */
  UART_DDR |= _BV(UART_TX_BIT);
    1db6:	56 9a       	sbi	0x0a, 6	; 10
    1db8:	86 e0       	ldi	r24, 0x06	; 6
        TIFR = _BV(TOV1);
        while(!(TIFR & _BV(TOV1)));
    #elif defined(__AVR_ATtiny43__)
        #error "LED flash for Tiny43 not yet supported"
    #else
        TCNT1 = -(F_CPU/(1024*16));
    1dba:	24 e2       	ldi	r18, 0x24	; 36
    1dbc:	3d ef       	ldi	r19, 0xFD	; 253
        TIFR1 = _BV(TOV1);
    1dbe:	91 e0       	ldi	r25, 0x01	; 1
        TIFR = _BV(TOV1);
        while(!(TIFR & _BV(TOV1)));
    #elif defined(__AVR_ATtiny43__)
        #error "LED flash for Tiny43 not yet supported"
    #else
        TCNT1 = -(F_CPU/(1024*16));
    1dc0:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
    1dc4:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
        TIFR1 = _BV(TOV1);
    1dc8:	96 bb       	out	0x16, r25	; 22
        while(!(TIFR1 & _BV(TOV1)));
    1dca:	b0 9b       	sbis	0x16, 0	; 22
    1dcc:	fe cf       	rjmp	.-4      	; 0x1dca <main+0x46>
    defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)   ||    \
    defined(__AVR_ATmega162__)  || defined(__AVR_ATmega32__)   ||    \
    defined(__AVR_ATmega64__)   || defined(__AVR_ATmega128__)
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    1dce:	1d 9a       	sbi	0x03, 5	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1dd0:	a8 95       	wdr
    1dd2:	81 50       	subi	r24, 0x01	; 1
#else
// This doesn't seem to work?
//    if ((UART_PIN & (1<<UART_RX_BIT)) == 0)
//    break;  // detect start bit on soft uart too.
#endif
  } while (--count);
    1dd4:	a9 f7       	brne	.-22     	; 0x1dc0 <main+0x3c>
         * and we needed the space back.
         */
#ifdef FOURPAGEERASE
        if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
#endif
        __boot_page_erase_short(address.word);
    1dd6:	93 e0       	ldi	r25, 0x03	; 3
    1dd8:	c9 2e       	mov	r12, r25

        /*
         * Copy data from the buffer into the flash write buffer.
         */
        do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    1dda:	bb 24       	eor	r11, r11
    1ddc:	b3 94       	inc	r11
        } while (len -= 2);

        /*
         * Actually Write the buffer to flash (and wait for it to finish.)
         */
        __boot_page_write_short(address.word);
    1dde:	25 e0       	ldi	r18, 0x05	; 5
    1de0:	a2 2e       	mov	r10, r18
        // Move RESET vector to 'save' vector
    // Save jmp targets (for "Verify")
    rstVect0_sav = buff.bptr[rstVect0];
    rstVect1_sav = buff.bptr[rstVect1];
    addr16_t vect;
    vect.word = ((uint16_t)main);
    1de2:	32 ec       	ldi	r19, 0xC2	; 194
    1de4:	e3 2e       	mov	r14, r19
    1de6:	3e e0       	ldi	r19, 0x0E	; 14
    1de8:	f3 2e       	mov	r15, r19
    buff.bptr[0] = vect.bytes[0]; // rjmp to start of bootloader
    buff.bptr[1] = vect.bytes[1] | 0xC0;  // make an "rjmp"
    1dea:	8f 2d       	mov	r24, r15
    1dec:	80 6c       	ori	r24, 0xC0	; 192
    1dee:	98 2e       	mov	r9, r24
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    1df0:	bd d0       	rcall	.+378    	; 0x1f6c <getch>

    if(ch == STK_GET_PARAMETER) {
    1df2:	81 34       	cpi	r24, 0x41	; 65
    1df4:	61 f4       	brne	.+24     	; 0x1e0e <main+0x8a>
      unsigned char which = getch();
    1df6:	ba d0       	rcall	.+372    	; 0x1f6c <getch>
    1df8:	18 2f       	mov	r17, r24
      verifySpace();
    1dfa:	d2 d0       	rcall	.+420    	; 0x1fa0 <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
    1dfc:	12 38       	cpi	r17, 0x82	; 130
    1dfe:	e9 f0       	breq	.+58     	; 0x1e3a <main+0xb6>
      putch(optiboot_version & 0xFF);
      } else if (which == STK_SW_MAJOR) {
    1e00:	11 38       	cpi	r17, 0x81	; 129
    1e02:	11 f4       	brne	.+4      	; 0x1e08 <main+0x84>
      putch(optiboot_version >> 8);
    1e04:	8b e3       	ldi	r24, 0x3B	; 59
    1e06:	01 c0       	rjmp	.+2      	; 0x1e0a <main+0x86>
      } else {
    /*
     * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
     */
    putch(0x03);
    1e08:	83 e0       	ldi	r24, 0x03	; 3
    1e0a:	a1 d0       	rcall	.+322    	; 0x1f4e <putch>
    1e0c:	9d c0       	rjmp	.+314    	; 0x1f48 <main+0x1c4>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    1e0e:	82 34       	cpi	r24, 0x42	; 66
    1e10:	11 f4       	brne	.+4      	; 0x1e16 <main+0x92>
      // SET DEVICE is ignored
      getNch(20);
    1e12:	84 e1       	ldi	r24, 0x14	; 20
    1e14:	03 c0       	rjmp	.+6      	; 0x1e1c <main+0x98>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    1e16:	85 34       	cpi	r24, 0x45	; 69
    1e18:	19 f4       	brne	.+6      	; 0x1e20 <main+0x9c>
      // SET DEVICE EXT is ignored
      getNch(5);
    1e1a:	85 e0       	ldi	r24, 0x05	; 5
    1e1c:	c9 d0       	rcall	.+402    	; 0x1fb0 <getNch>
    1e1e:	94 c0       	rjmp	.+296    	; 0x1f48 <main+0x1c4>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    1e20:	85 35       	cpi	r24, 0x55	; 85
    1e22:	39 f4       	brne	.+14     	; 0x1e32 <main+0xae>
      // LOAD ADDRESS
      address.bytes[0] = getch();
    1e24:	a3 d0       	rcall	.+326    	; 0x1f6c <getch>
    1e26:	c8 2f       	mov	r28, r24
      address.bytes[1] = getch();
    1e28:	a1 d0       	rcall	.+322    	; 0x1f6c <getch>
    1e2a:	d8 2f       	mov	r29, r24
      }
      else {
        RAMPZ &= 0xFE;
      }
#endif
      address.word *= 2; // Convert from word address to byte address
    1e2c:	cc 0f       	add	r28, r28
    1e2e:	dd 1f       	adc	r29, r29
    1e30:	8a c0       	rjmp	.+276    	; 0x1f46 <main+0x1c2>
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    1e32:	86 35       	cpi	r24, 0x56	; 86
    1e34:	21 f4       	brne	.+8      	; 0x1e3e <main+0xba>
        getNch(3);
        putch(0x00);
      }
#else
      // UNIVERSAL command is ignored
      getNch(4);
    1e36:	84 e0       	ldi	r24, 0x04	; 4
    1e38:	bb d0       	rcall	.+374    	; 0x1fb0 <getNch>
      putch(0x00);
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	e6 cf       	rjmp	.-52     	; 0x1e0a <main+0x86>
#endif
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    1e3e:	84 36       	cpi	r24, 0x64	; 100
    1e40:	09 f0       	breq	.+2      	; 0x1e44 <main+0xc0>
    1e42:	4b c0       	rjmp	.+150    	; 0x1eda <main+0x156>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    1e44:	93 d0       	rcall	.+294    	; 0x1f6c <getch>
    1e46:	92 d0       	rcall	.+292    	; 0x1f6c <getch>
    1e48:	d8 2e       	mov	r13, r24
      savelength = length;
      desttype = getch();
    1e4a:	90 d0       	rcall	.+288    	; 0x1f6c <getch>
    1e4c:	88 2e       	mov	r8, r24
    1e4e:	00 e0       	ldi	r16, 0x00	; 0
    1e50:	11 e0       	ldi	r17, 0x01	; 1

      // read a page worth of contents
      bufPtr = buff.bptr;
      do *bufPtr++ = getch();
    1e52:	8c d0       	rcall	.+280    	; 0x1f6c <getch>
    1e54:	f8 01       	movw	r30, r16
    1e56:	81 93       	st	Z+, r24
    1e58:	8f 01       	movw	r16, r30
      while (--length);
    1e5a:	de 12       	cpse	r13, r30
    1e5c:	fa cf       	rjmp	.-12     	; 0x1e52 <main+0xce>

      // Read command terminator, start reply
      verifySpace();
    1e5e:	a0 d0       	rcall	.+320    	; 0x1fa0 <verifySpace>

#else
/*
 * AVR with 2-byte ISR Vectors and rjmp
 */
      if (address.word == rstVect0) {
    1e60:	20 97       	sbiw	r28, 0x00	; 0
    1e62:	f1 f4       	brne	.+60     	; 0x1ea0 <main+0x11c>
        // This is the reset vector page. We need to live-patch
        // the code so the bootloader runs first.
        //
        // Move RESET vector to 'save' vector
    // Save jmp targets (for "Verify")
    rstVect0_sav = buff.bptr[rstVect0];
    1e64:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <_edata>
    1e68:	30 93 84 01 	sts	0x0184, r19	; 0x800184 <_edata+0x84>
    rstVect1_sav = buff.bptr[rstVect1];
    1e6c:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <_edata+0x1>
    1e70:	20 93 85 01 	sts	0x0185, r18	; 0x800185 <_edata+0x85>
    addr16_t vect;
    vect.word = ((uint16_t)main);
    buff.bptr[0] = vect.bytes[0]; // rjmp to start of bootloader
    buff.bptr[1] = vect.bytes[1] | 0xC0;  // make an "rjmp"
    1e74:	90 92 01 01 	sts	0x0101, r9	; 0x800101 <_edata+0x1>
        buff.bptr[saveVect0-(SPM_PAGESIZE*(save_vect_num/(SPM_PAGESIZE/2)))] = vect.bytes[0];
        buff.bptr[saveVect1-(SPM_PAGESIZE*(save_vect_num/(SPM_PAGESIZE/2)))] = (vect.bytes[1] & 0x0F)| 0xC0;  // make an "rjmp"
      }
#else

        saveVect0_sav = buff.bptr[saveVect0];
    1e78:	40 91 22 01 	lds	r20, 0x0122	; 0x800122 <_edata+0x22>
    1e7c:	40 93 86 01 	sts	0x0186, r20	; 0x800186 <_edata+0x86>
        saveVect1_sav = buff.bptr[saveVect1];
    1e80:	40 91 23 01 	lds	r20, 0x0123	; 0x800123 <_edata+0x23>
    1e84:	40 93 87 01 	sts	0x0187, r20	; 0x800187 <_edata+0x87>
        vect.bytes[0] = rstVect0_sav;
    1e88:	83 2f       	mov	r24, r19
        vect.bytes[1] = rstVect1_sav;
    1e8a:	92 2f       	mov	r25, r18
        vect.word = (vect.word-save_vect_num); //subtract 'save' interrupt position
    1e8c:	41 97       	sbiw	r24, 0x11	; 17
        // Move RESET jmp target to 'save' vector
        buff.bptr[saveVect0] = vect.bytes[0];
    1e8e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <_edata+0x22>
        buff.bptr[saveVect1] = (vect.bytes[1] & 0x0F)| 0xC0;  // make an "rjmp"
    1e92:	89 2f       	mov	r24, r25
    1e94:	8f 70       	andi	r24, 0x0F	; 15
    1e96:	80 6c       	ori	r24, 0xC0	; 192
    1e98:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <_edata+0x23>
        // Add rjump to bootloader at RESET vector
        vect.word = ((uint16_t)main); // (main) is always <= 0x0FFF; no masking needed.
        buff.bptr[0] = vect.bytes[0]; // rjmp 0x1c00 instruction
    1e9c:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <_edata>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, addr16_t mybuff,
                   addr16_t address, pagelen_t len)
{
    switch (memtype) {
    1ea0:	f5 e4       	ldi	r31, 0x45	; 69
    1ea2:	8f 12       	cpse	r8, r31
    1ea4:	01 c0       	rjmp	.+2      	; 0x1ea8 <main+0x124>
    1ea6:	ff cf       	rjmp	.-2      	; 0x1ea6 <main+0x122>
         * and we needed the space back.
         */
#ifdef FOURPAGEERASE
        if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
#endif
        __boot_page_erase_short(address.word);
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	c7 be       	out	0x37, r12	; 55
    1eac:	e8 95       	spm
        boot_spm_busy_wait();
    1eae:	07 b6       	in	r0, 0x37	; 55
    1eb0:	00 fc       	sbrc	r0, 0
    1eb2:	fd cf       	rjmp	.-6      	; 0x1eae <main+0x12a>
    1eb4:	a0 e0       	ldi	r26, 0x00	; 0
    1eb6:	b1 e0       	ldi	r27, 0x01	; 1
    1eb8:	fe 01       	movw	r30, r28

        /*
         * Copy data from the buffer into the flash write buffer.
         */
        do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    1eba:	8d 91       	ld	r24, X+
    1ebc:	9d 91       	ld	r25, X+
    1ebe:	0c 01       	movw	r0, r24
    1ec0:	b7 be       	out	0x37, r11	; 55
    1ec2:	e8 95       	spm
    1ec4:	11 24       	eor	r1, r1
    1ec6:	32 96       	adiw	r30, 0x02	; 2
        addrPtr += 2;
        } while (len -= 2);
    1ec8:	da 12       	cpse	r13, r26
    1eca:	f7 cf       	rjmp	.-18     	; 0x1eba <main+0x136>

        /*
         * Actually Write the buffer to flash (and wait for it to finish.)
         */
        __boot_page_write_short(address.word);
    1ecc:	fe 01       	movw	r30, r28
    1ece:	a7 be       	out	0x37, r10	; 55
    1ed0:	e8 95       	spm
        boot_spm_busy_wait();
    1ed2:	07 b6       	in	r0, 0x37	; 55
    1ed4:	00 fc       	sbrc	r0, 0
    1ed6:	fd cf       	rjmp	.-6      	; 0x1ed2 <main+0x14e>
    1ed8:	37 c0       	rjmp	.+110    	; 0x1f48 <main+0x1c4>
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    1eda:	84 37       	cpi	r24, 0x74	; 116
    1edc:	39 f5       	brne	.+78     	; 0x1f2c <main+0x1a8>
      uint8_t desttype;
      GETLENGTH(length);
    1ede:	46 d0       	rcall	.+140    	; 0x1f6c <getch>
    1ee0:	45 d0       	rcall	.+138    	; 0x1f6c <getch>
    1ee2:	d8 2e       	mov	r13, r24

      desttype = getch();
    1ee4:	43 d0       	rcall	.+134    	; 0x1f6c <getch>

      verifySpace();
    1ee6:	5c d0       	rcall	.+184    	; 0x1fa0 <verifySpace>
    1ee8:	8e 01       	movw	r16, r28
#endif
    default:
    do {
#ifdef VIRTUAL_BOOT_PARTITION
        // Undo vector patch in bottom page so verify passes
        if (address.word == rstVect0) ch = rstVect0_sav;
    1eea:	01 15       	cp	r16, r1
    1eec:	11 05       	cpc	r17, r1
    1eee:	19 f4       	brne	.+6      	; 0x1ef6 <main+0x172>
    1ef0:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <_edata+0x84>
    1ef4:	14 c0       	rjmp	.+40     	; 0x1f1e <main+0x19a>
        else if (address.word == rstVect1) ch = rstVect1_sav;
    1ef6:	01 30       	cpi	r16, 0x01	; 1
    1ef8:	11 05       	cpc	r17, r1
    1efa:	19 f4       	brne	.+6      	; 0x1f02 <main+0x17e>
    1efc:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <_edata+0x85>
    1f00:	0e c0       	rjmp	.+28     	; 0x1f1e <main+0x19a>
        else if (address.word == saveVect0) ch = saveVect0_sav;
    1f02:	02 32       	cpi	r16, 0x22	; 34
    1f04:	11 05       	cpc	r17, r1
    1f06:	19 f4       	brne	.+6      	; 0x1f0e <main+0x18a>
    1f08:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <_edata+0x86>
    1f0c:	08 c0       	rjmp	.+16     	; 0x1f1e <main+0x19a>
        else if (address.word == saveVect1) ch = saveVect1_sav;
    1f0e:	03 32       	cpi	r16, 0x23	; 35
    1f10:	11 05       	cpc	r17, r1
    1f12:	19 f4       	brne	.+6      	; 0x1f1a <main+0x196>
    1f14:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <_edata+0x87>
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <main+0x19a>
        else ch = pgm_read_byte_near(address.bptr);
    1f1a:	f8 01       	movw	r30, r16
    1f1c:	84 91       	lpm	r24, Z
        __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#else
        // read a Flash byte and increment the address
        __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#endif
        putch(ch);
    1f1e:	17 d0       	rcall	.+46     	; 0x1f4e <putch>
    } while (--length);
    1f20:	da 94       	dec	r13
    1f22:	0f 5f       	subi	r16, 0xFF	; 255
    1f24:	1f 4f       	sbci	r17, 0xFF	; 255
    1f26:	d1 10       	cpse	r13, r1
    1f28:	e0 cf       	rjmp	.-64     	; 0x1eea <main+0x166>
    1f2a:	0e c0       	rjmp	.+28     	; 0x1f48 <main+0x1c4>

      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    1f2c:	85 37       	cpi	r24, 0x75	; 117
    1f2e:	39 f4       	brne	.+14     	; 0x1f3e <main+0x1ba>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    1f30:	37 d0       	rcall	.+110    	; 0x1fa0 <verifySpace>
      putch(SIGNATURE_0);
    1f32:	8e e1       	ldi	r24, 0x1E	; 30
    1f34:	0c d0       	rcall	.+24     	; 0x1f4e <putch>
      putch(SIGNATURE_1);
    1f36:	83 e9       	ldi	r24, 0x93	; 147
    1f38:	0a d0       	rcall	.+20     	; 0x1f4e <putch>
      putch(SIGNATURE_2);
    1f3a:	81 e1       	ldi	r24, 0x11	; 17
    1f3c:	66 cf       	rjmp	.-308    	; 0x1e0a <main+0x86>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    1f3e:	81 35       	cpi	r24, 0x51	; 81
    1f40:	11 f4       	brne	.+4      	; 0x1f46 <main+0x1c2>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    1f42:	88 e0       	ldi	r24, 0x08	; 8
    1f44:	27 d0       	rcall	.+78     	; 0x1f94 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    1f46:	2c d0       	rcall	.+88     	; 0x1fa0 <verifySpace>
    }
    putch(STK_OK);
    1f48:	80 e1       	ldi	r24, 0x10	; 16
    1f4a:	01 d0       	rcall	.+2      	; 0x1f4e <putch>
  }
    1f4c:	51 cf       	rjmp	.-350    	; 0x1df0 <main+0x6c>

00001f4e <putch>:
  RS485_PORT &= ~_BV(RS485);
  #else
  RS485_PORT |= _BV(RS485);
  #endif
#endif
  __asm__ __volatile__ (
    1f4e:	2a e0       	ldi	r18, 0x0A	; 10
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	80 95       	com	r24
    1f54:	08 94       	sec
    1f56:	10 f4       	brcc	.+4      	; 0x1f5c <putch+0xe>
    1f58:	5e 98       	cbi	0x0b, 6	; 11
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <putch+0x12>
    1f5c:	5e 9a       	sbi	0x0b, 6	; 11
    1f5e:	00 00       	nop
    1f60:	15 d0       	rcall	.+42     	; 0x1f8c <uartDelay>
    1f62:	14 d0       	rcall	.+40     	; 0x1f8c <uartDelay>
    1f64:	86 95       	lsr	r24
    1f66:	2a 95       	dec	r18
    1f68:	b1 f7       	brne	.-20     	; 0x1f56 <putch+0x8>
    1f6a:	08 95       	ret

00001f6c <getch>:
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1f6c:	a8 95       	wdr
#endif
#endif

#ifdef SOFT_UART
    watchdogReset();
  __asm__ __volatile__ (
    1f6e:	29 e0       	ldi	r18, 0x09	; 9
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	4f 99       	sbic	0x09, 7	; 9
    1f74:	fe cf       	rjmp	.-4      	; 0x1f72 <getch+0x6>
    1f76:	0a d0       	rcall	.+20     	; 0x1f8c <uartDelay>
    1f78:	09 d0       	rcall	.+18     	; 0x1f8c <uartDelay>
    1f7a:	08 d0       	rcall	.+16     	; 0x1f8c <uartDelay>
    1f7c:	88 94       	clc
    1f7e:	4f 99       	sbic	0x09, 7	; 9
    1f80:	08 94       	sec
    1f82:	2a 95       	dec	r18
    1f84:	11 f0       	breq	.+4      	; 0x1f8a <getch+0x1e>
    1f86:	87 95       	ror	r24
    1f88:	f7 cf       	rjmp	.-18     	; 0x1f78 <getch+0xc>
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    1f8a:	08 95       	ret

00001f8c <uartDelay>:
#error Baud rate too high for soft UART
#endif


void uartDelay() {
  __asm__ __volatile__ (
    1f8c:	90 e3       	ldi	r25, 0x30	; 48
    1f8e:	9a 95       	dec	r25
    1f90:	f1 f7       	brne	.-4      	; 0x1f8e <uartDelay+0x2>
    1f92:	08 95       	ret

00001f94 <watchdogConfig>:
}

void watchdogConfig(uint8_t x) {
#ifdef WDCE //does it have a Watchdog Change Enable?
 #ifdef WDTCSR
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1f94:	e0 e6       	ldi	r30, 0x60	; 96
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	98 e1       	ldi	r25, 0x18	; 24
    1f9a:	90 83       	st	Z, r25
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
#endif

#ifdef WDTCSR
  WDTCSR = x;
    1f9c:	80 83       	st	Z, r24
    1f9e:	08 95       	ret

00001fa0 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    1fa0:	e5 df       	rcall	.-54     	; 0x1f6c <getch>
    1fa2:	80 32       	cpi	r24, 0x20	; 32
    1fa4:	19 f0       	breq	.+6      	; 0x1fac <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    1fa6:	88 e0       	ldi	r24, 0x08	; 8
    1fa8:	f5 df       	rcall	.-22     	; 0x1f94 <watchdogConfig>
    1faa:	ff cf       	rjmp	.-2      	; 0x1faa <verifySpace+0xa>
    while (1)                  // and busy-loop so that WD causes
      ;                      //  a reset and app start.
  }
  putch(STK_INSYNC);
    1fac:	84 e1       	ldi	r24, 0x14	; 20
    1fae:	cf cf       	rjmp	.-98     	; 0x1f4e <putch>

00001fb0 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    1fb0:	cf 93       	push	r28
    1fb2:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    1fb4:	db df       	rcall	.-74     	; 0x1f6c <getch>
    1fb6:	c1 50       	subi	r28, 0x01	; 1
    1fb8:	e9 f7       	brne	.-6      	; 0x1fb4 <getNch+0x4>
  verifySpace();
}
    1fba:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    1fbc:	f1 cf       	rjmp	.-30     	; 0x1fa0 <verifySpace>

00001fbe <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
    // Do spm stuff
    asm volatile (
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	0a 01       	movw	r0, r20
    1fc2:	67 bf       	out	0x37, r22	; 55
    1fc4:	e8 95       	spm
    1fc6:	11 24       	eor	r1, r1
    );

    // wait for spm to complete
    //   it doesn't have much sense for __BOOT_PAGE_FILL,
    //   but it doesn't hurt and saves some bytes on 'if'
    boot_spm_busy_wait();
    1fc8:	07 b6       	in	r0, 0x37	; 55
    1fca:	00 fc       	sbrc	r0, 0
    1fcc:	fd cf       	rjmp	.-6      	; 0x1fc8 <do_spm+0xa>
    if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
      // Re-enable read access to flash
      __boot_rww_enable_short();
    }
#endif
}
    1fce:	08 95       	ret
